{# Views/Tag/index.twig #}
{% extends "base.twig" %}

{% block title %}Tags{% endblock %}

{% block content %}
    <div class="flex justify-center items-center h-full bg-gray-700 text-gray-200">
        <main class="w-full max-w-4xl p-6">
            <div class="bg-gray-800 rounded-lg shadow-lg p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-semibold">Tag List</h2>
                    <button id="openModalBtn" class="bg-primary-500 hover:bg-primary-600 text-white py-2 px-4 rounded-lg transition duration-200">
                        Add New Tag
                    </button>
                </div>
                <div class="overflow-x-auto">
                    <table class="w-full bg-gray-700 rounded-lg overflow-hidden">
                        <thead class="bg-gray-600 text-gray-300">
                        <tr>
                            <th class="py-3 px-4 text-left">ID</th>
                            <th class="py-3 px-4 text-left">Name</th>
                            <th class="py-3 px-4 text-left">Actions</th>
                        </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-600">
                        {% if tags is defined and tags|length > 0 %}
                            {% for tag in tags %}
                                <tr class="hover:bg-gray-600 transition">
                                    <td class="py-3 px-4">{{ tag.getId() }}</td>
                                    <td class="py-3 px-4">{{ tag.getName() }}</td>
                                    <td class="py-3 px-4">
                                        <a href="tags/update/{{ tag.getId() }}" class="text-primary-400 hover:text-primary-500">Edit</a>
                                        <form action="tags/delete/{{ tag.getId() }}" method="post" class="inline">
                                            <button type="submit" class="text-red-400 hover:text-red-500">Delete</button>
                                        </form>
                                    </td>
                                </tr>
                            {% endfor %}
                        {% else %}
                            <tr>
                                <td colspan="3" class="py-4 text-center text-gray-400">No Tags available</td>
                            </tr>
                        {% endif %}
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>

    {# Modal for Adding a Tag #}
    <div id="addTagModal" class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center hidden">
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg w-96">
            <h2 class="text-xl font-semibold mb-4">Add New Tags</h2>
            <form action="/tags/create" method="POST">
                <div class="mb-4">
                    <label for="tags" class="block text-gray-300 mb-2">Tag Names (split by ,)</label>
                    <input type="text" id="tags" name="tags" class="w-full p-2 rounded-lg bg-gray-700 text-white border border-gray-600 focus:ring-2 focus:ring-primary-500">
                </div>
                <div class="flex justify-end space-x-4">
                    <button type="button" id="closeModalBtn" class="bg-gray-600 hover:bg-gray-500 text-white py-2 px-4 rounded-lg transition">
                        Cancel
                    </button>
                    <button type="submit" class="bg-primary-500 hover:bg-primary-600 text-white py-2 px-4 rounded-lg transition">
                        Save
                    </button>
                </div>
            </form>
        </div>
    </div>

{% endblock %}

{% block scripts %}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const modal = document.getElementById("addTagModal");
            const openModalBtn = document.getElementById("openModalBtn");
            const closeModalBtn = document.getElementById("closeModalBtn");
            const input = document.getElementById("tags");
            const errorMessage = document.createElement("p");
            const submitBtn = document.querySelector("button[type='submit']");

            errorMessage.classList.add("text-red-400", "mt-2", "text-sm");
            input.insertAdjacentElement("afterend", errorMessage);

            openModalBtn.addEventListener("click", () => {
                modal.classList.remove("hidden");
                input.value = "";
                errorMessage.textContent = "";
                submitBtn.disabled = true;
                submitBtn.classList.add("opacity-50", "cursor-not-allowed");
            });

            closeModalBtn.addEventListener("click", () => {
                modal.classList.add("hidden");
            });

            window.addEventListener("click", (e) => {
                if (e.target === modal) {
                    modal.classList.add("hidden");
                }
            });
            let isValid = false;

            modal.addEventListener("submit", (e) => {
                e.stopPropagation();
                if (!isValid){
                    e.preventDefault();
                }
            });

            const validate = (value) => {
                const regex = /^[a-zA-Z\s,]+$/;
                if (value.length < 3) {
                    return "Tag name must be at least 3 characters long.";
                }
                if (!regex.test(value)) {
                    return "Only letters, and spaces are allowed. split by ,";
                }
                return "";
            }

            input.addEventListener("input", () => {
                setTimeout(() => {

                }, 250);
                const error = validate(input.value);
                if (error) {
                    isValid = false;
                    errorMessage.textContent = error;
                    submitBtn.disabled = true;
                    submitBtn.classList.add("opacity-50", "cursor-not-allowed");
                } else {
                    isValid = true;
                    errorMessage.textContent = "";
                    submitBtn.disabled = false;
                    submitBtn.classList.remove("opacity-50", "cursor-not-allowed");
                }
            });

        });
    </script>
{% endblock %}

{# Views/Tag/index.twig #}
{% extends "base.twig" %}

{% block title %}Tags Dashboard{% endblock %}

{% block content %}
    <div class="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-gray-100 p-6">
        <main class="max-w-7xl mx-auto">
            {# Header Section #}
            <div class="mb-8">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
                    <div class="space-y-1">
                        <h1 class="text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary-400 to-primary-600">
                            Tag Management
                        </h1>
                        <p class="text-gray-400">Organize and categorize your content with tags</p>
                    </div>
                    <button id="openModalBtn" 
                            class="group relative inline-flex items-center gap-2 px-6 py-3 bg-primary-600 hover:bg-primary-700 
                                   rounded-xl transition-all duration-300 shadow-lg hover:shadow-primary-500/25">
                        <svg class="w-5 h-5 transition-transform group-hover:rotate-90 duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                        </svg>
                        <span>New Tag</span>
                    </button>
                </div>

                {# Stats Overview #}
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
                    <div class="bg-gray-800/50 backdrop-blur-sm p-4 rounded-xl border border-gray-700/50">
                        <p class="text-gray-400 text-sm">Total Tags</p>
                        <p class="text-2xl font-bold">{{ tags|length }}</p>
                    </div>
                    {# Add more stat cards as needed #}
                </div>
            </div>

            {# Tags Grid #}
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {% if tags is defined and tags|length > 0 %}
                    {% for tag in tags %}
                        <div class="group bg-gray-800/50 backdrop-blur-sm rounded-xl border border-gray-700/50 overflow-hidden 
                                  transition-all duration-300 hover:shadow-lg hover:shadow-primary-500/10 hover:border-primary-500/50">
                            <div class="p-6">
                                <div class="flex justify-between items-start mb-4">
                                    <div class="flex items-center gap-3">
                                        <div class="w-10 h-10 rounded-lg bg-primary-500/10 flex items-center justify-center">
                                            <svg class="w-5 h-5 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                                      d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A2 2 0 013 12V7a4 4 0 014-4z"/>
                                            </svg>
                                        </div>
                                        <div>
                                            <p class="text-lg font-semibold text-gray-100">{{ tag.getName() }}</p>
                                            <p class="text-sm text-gray-400">ID: {{ tag.getId() }}</p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="flex justify-end items-center gap-3 pt-4 border-t border-gray-700/50">
                                    <a href="tags/update/{{ tag.getId() }}" 
                                       class="inline-flex items-center gap-2 px-4 py-2 rounded-lg bg-gray-700/50 hover:bg-primary-500/20 
                                              text-gray-300 hover:text-primary-400 transition-all duration-200">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                                  d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                                        </svg>
                                        <span>Edit</span>
                                    </a>
                                    <form action="tags/delete/{{ tag.getId() }}" method="post" class="inline">
                                        <button type="submit" 
                                                class="inline-flex items-center gap-2 px-4 py-2 rounded-lg bg-gray-700/50 hover:bg-red-500/20 
                                                       text-gray-300 hover:text-red-400 transition-all duration-200">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                                      d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                            </svg>
                                            <span>Delete</span>
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="col-span-full">
                        <div class="flex flex-col items-center justify-center p-12 bg-gray-800/50 backdrop-blur-sm rounded-xl border border-gray-700/50">
                            <div class="w-20 h-20 mb-4 rounded-full bg-gray-700/50 flex items-center justify-center">
                                <svg class="w-10 h-10 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                          d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A2 2 0 013 12V7a4 4 0 014-4z"/>
                                </svg>
                            </div>
                            <h3 class="text-xl font-semibold text-gray-300 mb-2">No Tags Available</h3>
                            <p class="text-gray-400 text-center mb-6">Start organizing your content by creating your first tag</p>
                            <button id="openModalBtnEmpty" 
                                    class="inline-flex items-center gap-2 px-6 py-3 bg-primary-600 hover:bg-primary-700 rounded-xl 
                                           transition-all duration-300 shadow-lg hover:shadow-primary-500/25">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                                </svg>
                                <span>Create First Tag</span>
                            </button>
                        </div>
                    </div>
                {% endif %}
            </div>
        </main>
    </div>

    {# Modal for Adding Tags #}
    <div id="addTagModal" class="fixed inset-0 bg-gray-900/90 backdrop-blur-sm flex justify-center items-center opacity-0 pointer-events-none transition-all duration-300">
        <div class="bg-gray-800/90 backdrop-blur-sm w-full max-w-md mx-4 rounded-2xl shadow-2xl border border-gray-700/50">
            <div class="p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-xl font-semibold">Create New Tags</h2>
                    <button id="closeModalBtn" class="text-gray-400 hover:text-gray-200 transition-colors">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
                
                <form action="/tags/create" method="POST">
                    <div class="mb-6">
                        <label for="tags" class="block text-sm font-medium text-gray-300 mb-2">
                            Tag Names (separated by commas)
                        </label>
                        <input type="text" 
                               id="tags" 
                               name="tags" 
                               class="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-xl 
                                      focus:ring-2 focus:ring-primary-500 focus:border-transparent placeholder-gray-400">
                        <p class="error-message mt-2 text-sm text-red-400 hidden"></p>
                    </div>
                    
                    <div class="flex justify-end gap-3">
                        <button type="button" 
                                id="closeModalBtn2" 
                                class="px-5 py-2.5 bg-gray-700 hover:bg-gray-600 rounded-xl transition-colors duration-200">
                            Cancel
                        </button>
                        <button type="submit" 
                                class="px-5 py-2.5 bg-primary-600 hover:bg-primary-700 rounded-xl transition-all duration-200
                                       disabled:opacity-50 disabled:cursor-not-allowed shadow-lg hover:shadow-primary-500/25">
                            Create Tags
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endblock %}

{% block scripts %}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const modal = document.getElementById("addTagModal");
            const openModalBtn = document.getElementById("openModalBtn");
            const openModalBtnEmpty = document.getElementById("openModalBtnEmpty");
            const closeModalBtn = document.getElementById("closeModalBtn");
            const closeModalBtn2 = document.getElementById("closeModalBtn2");
            const input = document.getElementById("tags");
            const errorMessage = modal.querySelector(".error-message");
            const submitBtn = modal.querySelector("button[type='submit']");
            let isValid = false;

            const showModal = () => {
                modal.classList.remove("opacity-0", "pointer-events-none");
                input.focus();
            };

            const hideModal = () => {
                modal.classList.add("opacity-0", "pointer-events-none");
                input.value = "";
                errorMessage.textContent = "";
                errorMessage.classList.add("hidden");
                submitBtn.disabled = true;
            };

            [openModalBtn, openModalBtnEmpty].forEach(btn => {
                if (btn) btn.addEventListener("click", showModal);
            });
            
            [closeModalBtn, closeModalBtn2].forEach(btn => {
                if (btn) btn.addEventListener("click", hideModal);
            });

            modal.addEventListener("click", (e) => {
                if (e.target === modal) hideModal();
            });

            document.addEventListener("keydown", (e) => {
                if (e.key === "Escape" && !modal.classList.contains("opacity-0")) {
                    hideModal();
                }
            });

            input.addEventListener("input", () => {
                const error = validate(input.value);
                if (error) {
                    isValid = false;
                    errorMessage.textContent = error;
                    errorMessage.classList.remove("hidden");
                    submitBtn.disabled = true;
                } else {
                    isValid = true;
                    errorMessage.classList.add("hidden");
                    submitBtn.disabled = false;
                }
            });

            const validate = (value) => {
                const regex = /^[a-zA-Z\s,]+$/;
                if (!value.trim()) return "Tag name is required.";
                if (value.length < 3) return "Tag name must be at least 3 characters long.";
                if (!regex.test(value)) return "Only letters and spaces are allowed. Separate multiple tags with commas.";
                return "";
            };

            modal.addEventListener("submit", (e) => {
                if (!isValid) {
                    e.preventDefault();
                }
            });
        });
    </script>
{% endblock %}